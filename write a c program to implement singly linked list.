//singly linked list 
#include<stdio.h>
#include<stdlib.h>
struct node{
  int data;
  struct node*next;
};
struct node*head=NULL;
void insertatbeginning(int dt)
{
   struct node*ptr,*temp;
    
    ptr=(struct node*)malloc(sizeof(struct node));
    if(ptr==NULL)
    {
        printf("\ncan't able to insert.");
    } 
    else
    {
        if(head==NULL)
        {
        ptr->data=dt;
        ptr->next=NULL;
        head=ptr;
        }
        else
        {
        ptr->data=dt;
        ptr->next=head;
        head=ptr;
        }
       printf("\nelement is inserted."); 
    }
    
}
void insertatend(int dt)
{
    struct node*ptr,*temp;
    
    ptr=(struct node*)malloc(sizeof(struct node));
    if(ptr==NULL)
    {
        printf("\nstack is full.");
    }
    else
    {
        if(head==NULL)
        {
        ptr->data=dt;
        ptr->next=NULL;
        head=ptr;
        }
        else
        {
        temp=head;
        ptr->data=dt;
        ptr->next=NULL;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=ptr;
        }
        printf("\nelement is inserted.");
    }
}
void insertatindex(int dt)
{
    int in;
   struct node*ptr,*temp;
    
    ptr=(struct node*)malloc(sizeof(struct node));
    if(ptr==NULL)
    {
        printf("\ncan't be inserted.");
    }  
    else
    {   
        temp=head;
        printf("\nenter the index :");
        scanf("%d",&in);
      for(int i=0;i<in;i++)
      {
          temp=temp->next;
          if(temp==NULL)
          {
              printf("\n cant insert.");
              return;
          }
    
      }
    ptr->data=dt;
    ptr->next=temp->next;
    temp->next=ptr;
    printf("\nnode inserted .");
    }
}
void deletionatbeginning()
{
    struct node*temp;
    if(head==NULL)
    {
        printf("\n empty.");
    }
    else
    {
        temp=head;
        head=temp->next;
        free(temp);
    }
}
void deletionatend()
{
    struct node*temp,*temp1;
    if(head==NULL)
    {
        printf("\n empty.");
    }
    else
    {
        temp=head;
        while(temp->next!=NULL)
        {
            temp1=temp;
            temp=temp->next;
        }
        printf("\nelement is deleted %d",temp->data);
        temp1->next=NULL;
        free(temp);
    }
}
void deletionatindex()
{
    int in;
    struct node*temp,*temp1;
    if(head==NULL)
    {
        printf("\n empty.");
    }
    else
    {
        temp=head;
    printf("\nenter the index you want to delete .");
    scanf("%d",&in);
    for(int i=0;i<in;i++)
    {
        temp1=temp;
     temp=temp->next;
     if(temp==NULL)
     {
         printf("\n cant delete");
         return;
     }
    }
    temp1->next=temp->next;
     free(temp);
     printf("\nnode deleted.");
    }
}
void display()
{ struct node*temp;
    temp=head;
    if(temp==NULL)
    {
        printf("\nstack is empty.");
    }
    else
   {
        printf("\nelements of stack :");
    while(temp!=NULL)
    {
         printf("%d\t",temp->data);
        temp=temp->next;
       
        
    }
   }
}
int main()
{
    int ch,data;
while (1)
{
    printf("\n1.insert at beginning\n2.insert at end\n3.insert at index\n4.deletion at beginning\n5.deletion at end\n6. deletion at index\n 7.display\n8.exit");
    printf("\n enter your choice :");
    scanf("%d",&ch);
    if(ch==8)break;
    switch(ch)
    {
        case 1:
        printf("\nenter the data :");
        scanf("%d",&data);
        insertatbeginning(data);
        break;
        case 2:
        printf("\nenter the data :");
        scanf("%d",&data);
       insertatend(data);
        break;
        case 3:
        printf("\nenter the data :");
        scanf("%d",&data);
       insertatindex(data);
        break;
        case 4:
        deletionatbeginning();
        break;
        case 5:
        deletionatend();
        break;
        case 6:
        deletionatindex();
        break;
        case 7:
        display();
        break;
        default:
        printf("enter the valid choice .");
        break;
    }
}
    return 0;
}
